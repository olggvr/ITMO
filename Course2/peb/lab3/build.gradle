import java.security.MessageDigest

def static hash(File file, String algorithm) {
    MessageDigest md = MessageDigest.getInstance(algorithm)
    file.withInputStream { is ->
        byte[] buffer = new byte[8192]
        int bytesRead
        while ((bytesRead = is.read(buffer)) != -1) {
            md.update(buffer, 0, bytesRead)
        }
    }
    return md.digest().encodeHex().toString()
}

plugins {
    id 'java'
    id 'war'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.2'
}

war {
    archiveFileName = 'lab3.war'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

dependencies {
    providedCompile 'jakarta.enterprise:jakarta.enterprise.cdi-api:3.0.0'
    providedCompile 'jakarta.persistence:jakarta.persistence-api:3.0.0'
    providedCompile 'jakarta.servlet:jakarta.servlet-api:5.0.0'

    implementation 'org.glassfish:jakarta.faces:3.0.3'
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:2.0.0'

    implementation 'org.hibernate.orm:hibernate-core:6.6.1.Final'
    implementation 'org.postgresql:postgresql:42.7.4'

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation 'org.mockito:mockito-core:5.12.0'

}

//
test {
    useJUnitPlatform()
}

tasks.register("testAfterBuild") {
    group = "verification"
    description = "build, then testing"
    dependsOn("build")
    finalizedBy("test")
}

// doc task
javadoc {
    source = sourceSets.main.allJava
    destinationDir = layout.buildDirectory.dir("docs/javadoc").get().asFile
    options.encoding = 'UTF-8'
}

tasks.register('doc', Jar) {
    group = 'Documentation'
    description = 'Packing Javadoc archive with MD5/SHA-1 hashes in MANIFEST.MF'

    dependsOn javadoc

    archiveClassifier.set('javadoc')
    from("docs/javadoc")

    manifest {
        attributes(['Manifest-Version': '1.0'])

        def classDir = layout.buildDirectory.dir("classes/java/main").get().asFile
        def filesToHash = fileTree('src').include('**/*.java', '**/*.jsp') +
                fileTree(classDir).matching { include '**/*.class' }

        filesToHash.each { file ->
            def base = file.name.replaceAll(/\.(java|class|jsp)/, '')
            def md5Key = "MD5-${base}".toString()
            def sha1Key = "SHA1-${base}".toString()

            if (md5Key.length() <= 60 && sha1Key.length() <= 60) {
                attributes.put(md5Key, hash(file, 'MD5'))
                attributes.put(sha1Key, hash(file, 'SHA-1'))
            }
        }
    }
}
