plugins {
    id 'java'
    id 'war'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.2'
}

war {
    archiveFileName = 'lab3.war'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

dependencies {
    providedCompile 'jakarta.enterprise:jakarta.enterprise.cdi-api:3.0.0'
    providedCompile 'jakarta.persistence:jakarta.persistence-api:3.0.0'
    providedCompile 'jakarta.servlet:jakarta.servlet-api:5.0.0'

    implementation 'org.glassfish:jakarta.faces:3.0.3'
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:2.0.0'

    implementation 'org.hibernate.orm:hibernate-core:6.6.1.Final'
    implementation 'org.postgresql:postgresql:42.7.4'

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation 'org.mockito:mockito-core:5.12.0'

}

test {
    useJUnitPlatform()
}

tasks.register("testAfterBuild") {
    group = "verification"
    description = "build, then testing"
    dependsOn("build")
    finalizedBy("test")
}

import java.security.MessageDigest

// hashing
        def hash(File file, String algorithm) {
    MessageDigest md = MessageDigest.getInstance(algorithm)
    file.eachByte(1024) { buffer, bytesRead ->
        md.update(buffer, 0, bytesRead)
    }
    return md.digest().encodeHex().toString()
}

// javadoc task
tasks.register("generateJavadoc", Javadoc) {
    group = "documentation"
    description = "javadoc generation"

    destinationDir = file("$buildDir/docs/javadoc")
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
}

// manifest generation
tasks.register("generateManifest") {
    group = "documentation"
    description = "creating MANIFEST with MD5 & SHA-1"

    outputs.file("$buildDir/docs/MANIFEST.MF")

    doLast {
        def manifestFile = file("$buildDir/docs/MANIFEST.MF")
        manifestFile.text = ""

        fileTree(dir: "$buildDir/classes/java/main", include: '**/*.class').each { File file ->
        def md5 = hash(file, "MD5")
        def sha1 = hash(file, "SHA-1")

        manifestFile << "${file.name}:\n"
        manifestFile << "  MD5: ${md5}\n"
        manifestFile << "  SHA-1: ${sha1}\n\n"
    }
    }

}

// unite in one task
tasks.register("doc", Zip) {
    group = "documentation"
    description = "archive Javadoc & MANIFEST"

    dependsOn("generateJavadoc", "generateManifest")

    from("$buildDir/docs/javadoc") {
        into("javadoc")
    }

    from("$buildDir/docs/MANIFEST.MF") {
        into("")
    }

    archiveFileName = "project-docs.zip"
    destinationDirectory = file("$buildDir/distributions")
}
